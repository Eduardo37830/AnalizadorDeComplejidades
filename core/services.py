from core.graph.graph import create_analysis_graph

# Crear el grafo una sola vez al importar el m√≥dulo
_analysis_graph = None

def get_analysis_graph():
    """Obtiene una instancia singleton del grafo de an√°lisis."""
    global _analysis_graph
    if _analysis_graph is None:
        print("üîß Construyendo grafo de an√°lisis por primera vez...")
        _analysis_graph = create_analysis_graph()
        print("‚úÖ Grafo de an√°lisis construido y cached")
    return _analysis_graph

def run_analysis(pseudocode: str):
    """
    Ejecuta el an√°lisis completo de complejidad algor√≠tmica a partir de pseudoc√≥digo.

    Args:
        pseudocode: Pseudoc√≥digo a analizar

    Returns:
        dict: Resultado del an√°lisis con complejidad, diagramas y reporte
    """
    # Obtener el grafo (se construye solo una vez)
    graph = get_analysis_graph()

    # Estado inicial - el pseudoc√≥digo es la entrada principal
    initial_state = {
        "code": "",  # Se llenar√° despu√©s de procesar el pseudoc√≥digo
        "language": "pseudocode",  # Siempre pseudoc√≥digo
        "pseudocode": pseudocode,  # El pseudoc√≥digo es la entrada principal
        "ast": None,
        "cfg": None,
        "complexity": {},
        "recurrence": "",
        "cases": {},
        "tight_bound": "",
        "diagram": "",
        "report": "",
        "errors": []
    }

    # Ejecutar el grafo
    result = graph.invoke(initial_state)

    # Empaquetar la respuesta
    return {
        "complexity": result.get("complexity", {}),
        "diagram": result.get("diagram", ""),
        "report": result.get("report", ""),
        "cases": result.get("cases", {}),
        "tight_bound": result.get("tight_bound", ""),
        "errors": result.get("errors", [])
    }
